---
import BaseLayout from '../../layouts/BaseLayout.astro';
import ProjectList from '../../components/ProjectList.astro';
import { projects } from './projects';

// Extract all unique tags from projects
const allTags = [...new Set(projects.flatMap(project => project.tags || []))].sort();
---

<BaseLayout title="Projects">
  <div class="container mx-auto px-4">
    <h1 class="text-3xl font-bold mb-6">Projects</h1>
    
    <div class="flex flex-col md:flex-row gap-6">
      <!-- Tag filtering sidebar -->
      <div class="md:w-36 shrink-0">
        <div class="sticky top-6">
          <h3 class="text-lg font-medium mb-3">Filter by tag:</h3>
          <div class="flex flex-col gap-2 mb-4">
            <button id="clear-filter" class="border border-red-300 dark:border-red-700 rounded-2xl
              bg-red-50 dark:bg-red-900/20 text-sm text-red-700 dark:text-red-300 px-3 py-1 
              transition-all duration-0 flex items-center gap-1.5
              hover:border-red-500 dark:hover:border-red-500 text-left hidden">
              <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M18 6 6 18"></path>
                <path d="m6 6 12 12"></path>
              </svg>
              Clear filter
            </button>
            
            {allTags.map((tag) => (
              <button
                class="tag-filter border border-zinc-300 dark:border-zinc-700 rounded-2xl
                  text-sm text-zinc-700 dark:text-zinc-300 px-3 py-1 transition-all duration-0
                  hover:border-zinc-700 dark:hover:border-zinc-300 text-left break-words"
                data-tag={tag}
              >
                {tag}
              </button>
            ))}
          </div>
        </div>
      </div>
      
      <!-- Project content area -->
      <div class="flex-1">
        <div id="project-container">
          <ProjectList projects={projects} />
        </div>
      </div>
    </div>
  </div>
</BaseLayout>

<script define:vars={{ projects }}>
  // Client-side filtering logic
  document.addEventListener('DOMContentLoaded', () => {
    const tagButtons = document.querySelectorAll('.tag-filter');
    const clearFilterButton = document.getElementById('clear-filter');
    const projectContainer = document.getElementById('project-container');
    
    // Use the server-side passed projects variable directly
    const allProjects = projects;
    
    // Helper function to render filtered projects
    function renderProjects(filtered) {
      if (!projectContainer) return;
      
      // Clear current projects
      projectContainer.innerHTML = '';
      
      if (filtered.length === 0) {
        const noResults = document.createElement('div');
        noResults.className = 'text-center py-8 text-zinc-500';
        noResults.textContent = 'No projects match this filter';
        projectContainer.appendChild(noResults);
        return;
      }
      
      // Create new project list with filtered projects
      const projectList = document.createElement('div');
      projectList.className = 'grid grid-cols-12 gap-5';
      
      filtered.forEach((project, index) => {
        const projectCard = createProjectCard(project, index);
        projectList.appendChild(projectCard);
      });
      
      projectContainer.appendChild(projectList);

      // Re-render KaTeX expressions in the dynamically created content
      if (typeof renderMathInElement !== 'undefined') {
        // For KaTeX auto-render extension
        document.querySelectorAll('.description-text, .description-text-full').forEach(el => {
          renderMathInElement(el, {
            delimiters: [
              {left: '$$', right: '$$', display: true},
              {left: '$', right: '$', display: false}
            ],
            throwOnError: false
          });
        });
      } else if (window.katex) {
        // Direct KaTeX API
        document.querySelectorAll('.description-text, .description-text-full').forEach(el => {
          const mathElements = el.querySelectorAll('.math, .katex');
          mathElements.forEach(math => {
            const text = math.textContent || math.getAttribute('data-math');
            if (text) {
              try {
                katex.render(text, math);
              } catch (e) {
                console.error("KaTeX rendering error:", e);
              }
            }
          });
        });
      } else if (window.MathJax) {
        // For MathJax as fallback
        MathJax.typeset && MathJax.typeset();
      }
    }
    
    // Helper function to create a project card
    function createProjectCard(project, index) {
      const card = document.createElement('div');
      card.className = 'col-span-12 sm:col-span-6 lg:col-span-4 border dark:border-zinc-700 rounded-xl shadow-sm p-5 flex flex-col h-full';
      
      // Project title
      const title = document.createElement('h3');
      title.className = 'font-semibold mb-2';
      const titleLink = document.createElement('a');
      titleLink.className = 'underline';
      titleLink.href = project.demoLink || '#';
      if (project.demoLink) {
        titleLink.target = '_blank';
        titleLink.rel = project.demoLinkRel || 'noopener';
      }
      titleLink.textContent = project.name;
      title.appendChild(titleLink);
      
      // Project description container
      const descContainer = document.createElement('div');
      descContainer.className = 'text-zinc-600 dark:text-zinc-300 mb-4 description-container text-sm flex-grow';
      
      // Short description with line clamp
      const descShort = document.createElement('p');
      descShort.className = 'description-text line-clamp-2 min-h-[60px] max-h-[60px]';
      descShort.id = `description-${index}`;
      descShort.textContent = project.description;
      
      // Full description (hidden initially)
      const descFull = document.createElement('p');
      descFull.className = 'description-text-full hidden';
      descFull.id = `description-full-${index}`;
      descFull.textContent = project.description;
      
      // Add descriptions to container
      descContainer.appendChild(descShort);
      descContainer.appendChild(descFull);
      
      // Add read more button if description is long enough
      if (project.description && project.description.length > 100) {
        const readMoreBtn = document.createElement('button');
        readMoreBtn.id = `read-more-${index}`;
        readMoreBtn.className = 'text-sm font-bold text-zinc-600 dark:text-zinc-300 hover:underline mt-1 read-more-btn';
        readMoreBtn.textContent = 'Read more';
        readMoreBtn.onclick = function() {
          toggleDescription(index);
        };
        descContainer.appendChild(readMoreBtn);
      }
      
      // Links section
      const linksDiv = document.createElement('div');
      linksDiv.className = 'flex justify-end gap-3 mt-auto';
      
      // Add article link if exists
      if (project.postLink) {
        const articleLink = document.createElement('a');
        articleLink.className = 'border border-zinc-300 dark:border-zinc-700 rounded-2xl text-sm text-zinc-700 dark:text-zinc-300 no-underline px-3 py-1 transition-all duration-0 flex items-center gap-1 hover:border-zinc-700 dark:hover:border-zinc-300';
        articleLink.href = project.postLink;
        articleLink.textContent = 'Article';
        linksDiv.appendChild(articleLink);
      }
      
      // Add demo link if exists
      if (project.demoLink) {
        const demoLink = document.createElement('a');
        demoLink.className = 'border border-zinc-300 dark:border-zinc-700 rounded-2xl text-sm text-zinc-700 dark:text-zinc-300 no-underline px-3 py-1 transition-all duration-0 flex items-center gap-1 hover:border-zinc-700 dark:hover:border-zinc-300';
        demoLink.href = project.demoLink;
        demoLink.target = '_blank';
        demoLink.rel = project.demoLinkRel || 'noopener';
        demoLink.textContent = 'Demo';
        linksDiv.appendChild(demoLink);
      }
      
      // Assemble card
      card.appendChild(title);
      card.appendChild(descContainer);
      card.appendChild(linksDiv);
      
      return card;
    }
    
    // Copy the toggleDescription function from ProjectList.astro
    function toggleDescription(index) {
      const descriptionEl = document.getElementById(`description-${index}`);
      const descriptionFullEl = document.getElementById(`description-full-${index}`);
      const buttonEl = document.getElementById(`read-more-${index}`);
      
      if (!descriptionEl || !descriptionFullEl || !buttonEl) return;
      
      if (descriptionEl.classList.contains('line-clamp-2')) {
        // Expand
        descriptionEl.classList.remove('line-clamp-2');
        descriptionEl.classList.add('hidden');
        descriptionFullEl.classList.remove('hidden');
        buttonEl.textContent = 'Show less';
      } else {
        // Collapse
        descriptionEl.classList.add('line-clamp-2');
        descriptionEl.classList.remove('hidden');
        descriptionFullEl.classList.add('hidden');
        buttonEl.textContent = 'Read more';
      }
    }
    
    // Add click handlers to tag buttons
    tagButtons.forEach(button => {
      button.addEventListener('click', () => {
        const selectedTag = button.getAttribute('data-tag');
        if (!selectedTag) return;
        
        // Update active tag styling
        tagButtons.forEach(btn => {
          btn.classList.remove('bg-zinc-100', 'dark:bg-zinc-800');
        });
        button.classList.add('bg-zinc-100', 'dark:bg-zinc-800');
        
        // Show clear filter button
        if (clearFilterButton) {
          clearFilterButton.classList.remove('hidden');
        }
        
        // Filter projects
        const filteredProjects = allProjects.filter(project => 
          project.tags && project.tags.includes(selectedTag)
        );
        
        renderProjects(filteredProjects);
      });
    });
    
    // Clear filter handler
    if (clearFilterButton) {
      clearFilterButton.addEventListener('click', () => {
        // Reset active tag styling
        tagButtons.forEach(btn => {
          btn.classList.remove('bg-zinc-100', 'dark:bg-zinc-800');
        });
        
        // Hide clear filter button
        clearFilterButton.classList.add('hidden');
        
        // Show all projects
        renderProjects(allProjects);
      });
    }
  });
</script>