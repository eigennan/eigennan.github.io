---
import BaseLayout from '../../layouts/BaseLayout.astro';
import ProjectList from '../../components/ProjectList.astro';
import { projects } from './projects';

// Extract all unique tags from projects
const allTags = [...new Set(projects.flatMap(project => project.tags || []))].sort();
---

<BaseLayout title="Projects">
  <div class="container mx-auto px-4">
    <h1 class="text-3xl font-bold mb-6">Projects</h1>
    
    <!-- Tag filtering bar -->
    <div class="mb-8">
      <div class="flex flex-wrap gap-2 items-center">
        <span class="text-zinc-700 dark:text-zinc-300 mr-2">Filter by:</span>
        <button id="clear-filter" class="border border-zinc-300 dark:border-zinc-700 rounded-2xl
          text-sm text-zinc-700 dark:text-zinc-300 px-3 py-1 transition-all duration-700
          hover:border-zinc-700 dark:hover:border-zinc-300 hidden">
          Clear filter
        </button>
        
        {allTags.map((tag) => (
          <button
            class="tag-filter border border-zinc-300 dark:border-zinc-700 rounded-2xl
              text-sm text-zinc-700 dark:text-zinc-300 px-3 py-1 transition-all duration-700
              hover:border-zinc-700 dark:hover:border-zinc-300"
            data-tag={tag}
          >
            {tag}
          </button>
        ))}
      </div>
    </div>
    
    <div id="project-container">
      <ProjectList projects={projects} />
    </div>
  </div>
</BaseLayout>

<script define:vars={{ projects }}>
  // Client-side filtering logic
  document.addEventListener('DOMContentLoaded', () => {
    const tagButtons = document.querySelectorAll('.tag-filter');
    const clearFilterButton = document.getElementById('clear-filter');
    const projectContainer = document.getElementById('project-container');
    
    // Use the server-side passed projects variable directly
    const allProjects = projects;
    
    // Helper function to render filtered projects
    function renderProjects(filtered) {
      if (!projectContainer) return;
      
      // Clear current projects
      projectContainer.innerHTML = '';
      
      if (filtered.length === 0) {
        const noResults = document.createElement('div');
        noResults.className = 'col-span-12 text-center py-8 text-zinc-500';
        noResults.textContent = 'No projects match this filter';
        projectContainer.appendChild(noResults);
        return;
      }
      
      // Create new project list with filtered projects
      const projectList = document.createElement('div');
      projectList.className = 'grid grid-cols-12 gap-5';
      
      filtered.forEach(project => {
        const projectCard = createProjectCard(project);
        projectList.appendChild(projectCard);
      });
      
      projectContainer.appendChild(projectList);
    }
    
    // Helper function to create a project card
    function createProjectCard(project) {
      const card = document.createElement('div');
      card.className = 'col-span-12 sm:col-span-6 lg:col-span-4 border dark:border-zinc-700 rounded-xl shadow-sm p-5';
      
      // Project title
      const title = document.createElement('h3');
      title.className = 'font-semibold mb-2';
      const titleLink = document.createElement('a');
      titleLink.className = 'underline';
      titleLink.href = project.demoLink || '#';
      titleLink.target = '_blank';
      titleLink.rel = project.demoLinkRel || 'noopener';
      titleLink.textContent = project.name;
      title.appendChild(titleLink);
      
      // Project description
      const descDiv = document.createElement('div');
      descDiv.className = 'line-clamp-2 text-zinc-600 dark:text-zinc-300 mb-4 text-sm min-h-[50px]';
      const descP = document.createElement('p');
      descP.textContent = project.description;
      descDiv.appendChild(descP);
      
      // Links section
      const linksDiv = document.createElement('div');
      linksDiv.className = 'flex justify-end gap-3';
      
      // Add article link if exists
      if (project.postLink) {
        const articleLink = document.createElement('a');
        articleLink.className = 'border border-zinc-300 dark:border-zinc-700 rounded-2xl text-sm text-zinc-700 dark:text-zinc-300 no-underline px-3 py-1 transition-all duration-0 flex items-center gap-1 hover:border-zinc-700 dark:hover:border-zinc-300';
        articleLink.href = project.postLink;
        articleLink.textContent = 'Article';
        linksDiv.appendChild(articleLink);
      }
      
      // Add demo link if exists
      if (project.demoLink) {
        const demoLink = document.createElement('a');
        demoLink.className = 'border border-zinc-300 dark:border-zinc-700 rounded-2xl text-sm text-zinc-700 dark:text-zinc-300 no-underline px-3 py-1 transition-all duration-0 flex items-center gap-1 hover:border-zinc-700 dark:hover:border-zinc-300';
        demoLink.href = project.demoLink;
        demoLink.target = '_blank';
        demoLink.rel = project.demoLinkRel || 'noopener';
        demoLink.textContent = 'Demo';
        linksDiv.appendChild(demoLink);
      }
      
      // Assemble card
      card.appendChild(title);
      card.appendChild(descDiv);
      card.appendChild(linksDiv);
      
      return card;
    }
    
    // Add click handlers to tag buttons
    tagButtons.forEach(button => {
      button.addEventListener('click', () => {
        const selectedTag = button.getAttribute('data-tag');
        if (!selectedTag) return;
        
        // Update active tag styling
        tagButtons.forEach(btn => {
          btn.classList.remove('bg-zinc-100', 'dark:bg-zinc-800');
        });
        button.classList.add('bg-zinc-100', 'dark:bg-zinc-800');
        
        // Show clear filter button
        if (clearFilterButton) {
          clearFilterButton.classList.remove('hidden');
        }
        
        // Filter projects
        const filteredProjects = allProjects.filter(project => 
          project.tags && project.tags.includes(selectedTag)
        );
        
        renderProjects(filteredProjects);
      });
    });
    
    // Clear filter handler
    if (clearFilterButton) {
      clearFilterButton.addEventListener('click', () => {
        // Reset active tag styling
        tagButtons.forEach(btn => {
          btn.classList.remove('bg-zinc-100', 'dark:bg-zinc-800');
        });
        
        // Hide clear filter button
        clearFilterButton.classList.add('hidden');
        
        // Show all projects
        renderProjects(allProjects);
      });
    }
  });
</script>